<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A Matrix-Factorization-Based Recommendation System</title>
      <link href="/2020/11/22/a-matrix-factorization-based-recommendation-system/"/>
      <url>/2020/11/22/a-matrix-factorization-based-recommendation-system/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Personalized recommendation systems are popular business applications of machine learning. Imagine given a set of ratings from Netflix users on many movies they have seen $(\text{ratings are from one star to five starts})$, how can we get a personalized rating predictor for a given user on unseen movies?</p><p>Let’s say $U$ as a set of users and $I$ as a set of items, then the rating predictor can be expressed as $f: U \times I \rightarrow \mathcal{R}$. We can then use a matrix $M$ with size of $m \times n$ where $m$ rows represent users and columns are for $n$ movies. For example, if $M_{12,34} = 5$, that is, a 5 star is given by user 12 on movie 34. However, this rating matrix should be very sparse as it is impossible for everyone to watch large portion of movies in the market. More practically, only 1% of the cells in the rating matrix are observed in average while all other 99% are missing values. The objective of our predictor is to estimate those missing values, reflecting the user’s preference learned from available ratings.</p><h2 id="Matrix-Factorization"><a href="#Matrix-Factorization" class="headerlink" title="Matrix Factorization"></a>Matrix Factorization</h2><p>Intuitively we can assume the matrix is a low-rank matrix as there are only a few factors $(\text{e.g, genre, director, main actor/actress, etc.})$ that determine the preferences. Let’s say we use $r$ as the number of factors. We can define the user profile $U \in \mathcal{R}^{m \times r}$, and the movie profile $V \in \mathcal{R}^{n \times r}$. Then we want to use the inner product of two length $r$ vectors to estimate the rating given by a user $u$ on movie $v$:<br>$$M_{u,v} \approx \sum_{k=1}^{r} U_{u,k} V_{v,k}$$<br>We use the sum of squares error (SSE) as our metrics and we can have the objective function we need to minimize:</p><p>$$ E(U,V) = \sum_{(u,v) \in M} (M_{u,v} - U_{u}^T V_v)^2 = \sum_{(u,v) \in M} (M_{u,v} - \sum_{k=1}^r U_{u,k} V_{v,k})^2 $$</p><p>This looks similar to the loss function of the linear regression:</p><p>$$E(\theta) = \sum_{i=1}^m (Y^i - \theta^T x^i)^2 = \sum_{i=1}^m (Y^i - \sum_{k=1}^r \theta_k x_k^i)^2$$</p><p>where $m$ is the size of training data. We can compare above two functions and see that for linear regression, we use the same $\theta$ on any input $x^i$, but for matrix factorization we are proposing, different rows of $U$ are applied based on the user $u$.</p><h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><p>Since there is no closed form solution to our objective function, we use the gradient descent:</p><p>$$U_{u,k} \leftarrow U_{u,k} - \mu \frac{\partial E(U,V)}{\partial U_{u,k}}$$</p><p>where $\mu$ can be used as the update rate. And we have</p><p>$$ \frac{\partial E(U,V)}{\partial U_{u,k}} = -2 \sum_{v|(u,v)\in M}(M_{u,v} - \sum_{k=1}^r U_{u,k} V_{v,k}) * V_{v,k} $$</p><p>similarly for $V$, so we can do gradient descent:</p><p>$$ U_{u,k} \leftarrow U_{u,k} + 2\mu \sum_{v|(u,v)\in M} (M_{u,v} - \sum_{k=1}^r U_{u,k} V_{v,k}) * V_{v,k} $$<br>$$ V_{v,k} \leftarrow V_{v,k} + 2\mu \sum_{v|(u,v)\in M} (M_{u,v} - \sum_{k=1}^r U_{u,k} V_{v,k}) * U_{u,k} $$</p><h3 id="Regularization"><a href="#Regularization" class="headerlink" title="Regularization"></a>Regularization</h3><p>We can penalize for large values in $U$ and $V$ to avoid overfitting by including regularization terms. We can rewrite the regularized objective function:</p><p>$$E(U,V) = \sum_{(u,v) \in M} (M_{u,v} - U_{u}^T V_v)^2 = \sum_{(u,v) \in M} (M_{u,v} - \sum_{k=1}^r U_{u,k} V_{v,k})^2 + \lambda \sum_{u,k} U_{u,k}^2 + \lambda \sum_{v,k} V_{v,k}^2$$</p><p>where $lambda$ is a parameter which controls the importance of regularization terms. We can rewrite the gradient descent considering $(\text{take user profile as an instance})$:</p><p>$$\frac{\partial E(U,V)}{\partial U_{u,k}} = -2 \sum_{v|(u,v)\in M}(M_{u,v} - \sum_{k=1}^r U_{u,k} V_{v,k}) * V_{v,k} + 2\lambda U_{u,k}$$</p><p>so we have:<br>$$ U_{u,k} \leftarrow U_{u,k} + 2\mu \sum_{v|(u,v)\in M} (M_{u,v} - \sum_{k=1}^r U_{u,k} V_{v,k}) * V_{v,k} -  2\lambda U_{u,k}$$<br>and<br>$$ V_{v,k} \leftarrow V_{v,k} + 2\mu \sum_{v|(u,v)\in M} (M_{u,v} - \sum_{k=1}^r U_{u,k} V_{v,k}) * U_{u,k} - 2\lambda V_{v,k}$$</p><h2 id="Coding-in-Matlab"><a href="#Coding-in-Matlab" class="headerlink" title="Coding in Matlab"></a>Coding in Matlab</h2><p>Let’s use the data set <a href="https://github.com/ChujieChen/CSE_ISYE_6740_ComputationalDataAnalysis/raw/master/assigments/assignment3/movie_data.mat">movie_data.mat</a> as an example. The file contains the test set and a train set. The size of each set is $943 \times 1682$, i.e. 943 users and 1682 movies. Each value in the matrix can be 0: missing, or 1 - 5: ratings. The myRecommender.m is quite straightforward:</p><pre class="line-numbers language-mathml" data-language="mathml"><code class="language-mathml">function [U, V] = myRecommender(rateMatrix, lowRank)    % Parameters    maxIter = 5e3; % Choose your own.    learningRate = 1e - 4; % Choose your own.    regularizer = 1e - 2; % Choose your own.    % Random initialization:    [n1, n2] = size(rateMatrix);    U = rand(n1, lowRank) / lowRank;    V = rand(n2, lowRank) / lowRank;    % Gradient Descent:    %% change of reconstruction error (see if it is converged) and iteration used to stop loop    deltaRecoError = 1e - 4 * nnz(rateMatrix &gt; 0);    recoError = Inf;    newRecoError = 5 * 5 * numel(rateMatrix);    it = 0;    %% update U and V    while abs(newRecoError - recoError) &gt; deltaRecoError &amp;&amp; it &lt; maxIter        recoError = newRecoError;        % note that if sum(Uuk*Vik) holds non-zero value for        % corresponding zero value Mui, we should not take it into account        % since we want UV to be similar to M as much as possible        U = U + 2 * learningRate * ((rateMatrix - U * V') .* (rateMatrix &gt; 0)) * V - 2 * learningRate * regularizer * U;        V = V + 2 * learningRate * ((rateMatrix - U * V') .* (rateMatrix &gt; 0))' * U - 2 * learningRate * regularizer * V;        % update the objective funtion        newRecoError = sumsqr((rateMatrix - U * V') .* (rateMatrix &gt; 0)) + regularizer * sumsqr(U) + regularizer * sumsqr(V);        it = it + 1;    endend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="To-Be-Continued…"><a href="#To-Be-Continued…" class="headerlink" title="To Be Continued…"></a>To Be Continued…</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Machine learning </tag>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set with Range Sums using Splay Tree</title>
      <link href="/2020/09/12/set-with-range-sums-using-splay-tree/"/>
      <url>/2020/09/12/set-with-range-sums-using-splay-tree/</url>
      
        <content type="html"><![CDATA[<p>A <a href="https://en.wikipedia.org/wiki/Splay_tree">splay tree</a> is a self-balancing binary search tree. It performs operations such as insertion, look-up and removal in O(log n) amortized time. The splay tree moves recently accessed elements to the root by splaying, so if the element is queried again it can be reached in O(1) time.</p><p>A fully-fledged splay tree involves such operations:</p><ul><li>Splay: moving the recently accessed nodes to the root through a series of rotations below based on different situation<ul><li>Zig</li><li>Zig-zig and Zag-zag</li><li>Zig-zag and Zag-zig</li></ul></li><li>Join: merging two subtrees</li><li>Split: splitting one tree into two subtrees</li><li>Insert: add an element</li><li>Delete: remove an element</li><li>Find: look up an element</li></ul><p>A good visualization can be found <a href="https://www.cs.usfca.edu/~galles/visualization/SplayTree.html">here</a>. More details about splay trees and above operations can be found on <a href="https://en.wikipedia.org/wiki/Splay_tree">Wikipedia</a>. Here I use an example called <strong>Set with range sums</strong> to show the application of splay trees.</p><h2 id="Set-with-Range-Sums"><a href="#Set-with-Range-Sums" class="headerlink" title="Set with Range Sums"></a>Set with Range Sums</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>Implement a data structure that stores a set 𝑆 of integers with the following allowed operations:</p><ul><li><strong>add(𝑖)</strong> — add integer 𝑖 into the set <em>S</em> (if it was there already, the set doesn’t change).</li><li><strong>del(𝑖)</strong> — remove integer 𝑖 from the set 𝑆 (if there was no such element, nothing happens).</li><li><strong>find(𝑖)</strong> — check whether 𝑖 is in the set 𝑆 or not.</li><li><strong>sum(l, r)</strong> — output the sum of all elements 𝑣 in 𝑆 such that 𝑙 ≤𝑣 ≤𝑟.</li></ul><p>Initially the set 𝑆 is empty. The first line contains 𝑛 — the number of operations. The next 𝑛 lines contain operations. Each operation is one of the following:</p><ul><li>“+ i” — which means add some integer (not 𝑖, see below) to 𝑆,</li><li>“- i” — which means del some integer (not 𝑖, see below) from 𝑆,</li><li>“? i” — which means find some integer (not 𝑖, see below)in 𝑆,</li><li>“s l r” — which means compute the sum of all elements of 𝑆 within some range of values (not from 𝑙 to 𝑟, see below).</li></ul><p>To avoid integer overflow, we denote M = 1 000 000 001 and let x be the result of the last <strong>sum</strong> operation, or just 0 if there were no <strong>sum</strong> operations before.</p><ul><li>“+ i” means <strong>add</strong>((𝑖 + 𝑥) mod 𝑀),  </li><li>“- i” means <strong>del</strong>((𝑖 + 𝑥) mod 𝑀),  </li><li>“? i” means <strong>find</strong>((𝑖 + 𝑥) mod 𝑀),  </li><li>“s l r” means <strong>sum</strong>((𝑙+𝑥) mod 𝑀, (𝑟 + 𝑥) mod 𝑀).</li></ul><p>Constraints. 1 ≤ n ≤ 100 000; 0 ≤ i ≤ 10^9.</p><hr><p>This is typical problem that needs a splay tree if you care about the efficiency, as we can use the <strong>Split</strong> to get the range sum and <strong>Join</strong> two subtrees back to restore the structure.</p><h3 id="Thoughts"><a href="#Thoughts" class="headerlink" title="Thoughts"></a>Thoughts</h3><p>The idea is each <strong>Vertex</strong> (TreeNode) has a <strong>key</strong> representing an integer, a <strong>sum</strong> recording the sum of all the keys in the subtree, a <strong>left</strong> pointing to its left child vertex, a <strong>right</strong> pointing to its right child vertex, and a <strong>parent</strong> pointing to its parent vertex. Note that the <strong>sum</strong> is not static, but will constantly change as the splay tree changes.</p><p>With this design, <strong>add</strong> would just be Insert a vertex; <strong>del</strong> is the same as Delete; <strong>find</strong> equals Find. How about <strong>sum(l, r)</strong>? Well, if we <em>split</em> the splay tree into three subtrees: <strong><em>I</em></strong> (nodes having keys smaller than <strong>l</strong>), <strong><em>J</em></strong> (keys are greater than <strong>l</strong> but smaller than <strong>r</strong>), and <strong><em>K</em></strong> (keys are greater than <strong>r</strong>). Obviously, the sum we want is the sum stored in the root of the middle subtree <strong><em>J</em></strong>. Once we get the sum we need, we just need to merge three parts back. All operations of the splay tree run in $O(log n)$ time on average, so this is a very effective way to solve the problem.</p><h2 id="Let’s-Code"><a href="#Let’s-Code" class="headerlink" title="Let’s Code!"></a>Let’s Code!</h2><h3 id="Skeleton"><a href="#Skeleton" class="headerlink" title="Skeleton"></a>Skeleton</h3><p>First, let me present the skeleton of the java class that handles i/o.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetRangeSum</span> <span class="token punctuation">{</span>    BufferedReader br<span class="token punctuation">;</span>    PrintWriter out<span class="token punctuation">;</span>    StringTokenizer st<span class="token punctuation">;</span>    boolean eof<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> final int <span class="token constant">MODULO</span> <span class="token operator">=</span> <span class="token number">1000000001</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws IOException <span class="token punctuation">{</span>        int n <span class="token operator">=</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int last_sum_result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            char type <span class="token operator">=</span> <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token string">'+'</span><span class="token operator">:</span>                    <span class="token punctuation">{</span>                        int x <span class="token operator">=</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> last_sum_result<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">MODULO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'-'</span><span class="token operator">:</span>                    <span class="token punctuation">{</span>                        int x <span class="token operator">=</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">erase</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> last_sum_result<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">MODULO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'?'</span><span class="token operator">:</span>                    <span class="token punctuation">{</span>                        int x <span class="token operator">=</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">+</span> last_sum_result<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">MODULO</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"Found"</span> <span class="token operator">:</span> <span class="token string">"Not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>                    <span class="token punctuation">{</span>                        int l <span class="token operator">=</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        int r <span class="token operator">=</span> <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        long res <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">+</span> last_sum_result<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">MODULO</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> last_sum_result<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token constant">MODULO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                        last_sum_result <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span><span class="token punctuation">(</span>res <span class="token operator">%</span> <span class="token constant">MODULO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">SetRangeSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws IOException <span class="token punctuation">{</span>        br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws IOException <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">SetRangeSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>st <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                st <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                eof <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    int <span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    char <span class="token function">nextChar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> throws IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Clearly, we need to define the Vertex as the TreeNode in the splay tree. A vertex is defined to be able to hold a value <code>key</code>, the sum below the present node <code>sum</code>, <code>left</code> / <code>right</code> child node, and its <code>parent</code> node.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Splay tree implementation</span><span class="token comment">// Vertex of a splay tree</span><span class="token keyword">class</span> <span class="token class-name">Vertex</span> <span class="token punctuation">{</span>    int key<span class="token punctuation">;</span>    <span class="token comment">// Sum of all the keys in the subtree - remember to update</span>    <span class="token comment">// it after each operation that changes the tree.</span>    long sum<span class="token punctuation">;</span>    Vertex left<span class="token punctuation">;</span>    Vertex right<span class="token punctuation">;</span>    Vertex parent<span class="token punctuation">;</span>    <span class="token function">Vertex</span><span class="token punctuation">(</span><span class="token parameter">int key<span class="token punctuation">,</span> long sum<span class="token punctuation">,</span> Vertex left<span class="token punctuation">,</span> Vertex right<span class="token punctuation">,</span> Vertex parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> sum<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Vertex root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Basic-operations"><a href="#Basic-operations" class="headerlink" title="Basic operations"></a>Basic operations</h3><p>Then as described above, we need basic operations like: Splay, Join, Split, Insert, Delete,  and Find. Let’s have the Splay as <code>splay</code> like so. Again, the <code>splay</code> moves the node through a series of rotations (<code>smallRotation / bigRotation</code>) that change the structure of the tree, and thus, the <code>vertex.sum</code> changes accordingly via calling <code>update</code>.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Makes splay of the given vertex and returns the new root.</span>Vertex <span class="token function">splay</span><span class="token punctuation">(</span><span class="token parameter">Vertex v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">smallRotation</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">bigRotation</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> v<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">smallRotation</span><span class="token punctuation">(</span><span class="token parameter">Vertex v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vertex parent <span class="token operator">=</span> v<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Vertex grandparent <span class="token operator">=</span> v<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>left <span class="token operator">==</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Vertex m <span class="token operator">=</span> v<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        v<span class="token punctuation">.</span>right <span class="token operator">=</span> parent<span class="token punctuation">;</span>        parent<span class="token punctuation">.</span>left <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        Vertex m <span class="token operator">=</span> v<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        v<span class="token punctuation">.</span>left <span class="token operator">=</span> parent<span class="token punctuation">;</span>        parent<span class="token punctuation">.</span>right <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>parent <span class="token operator">=</span> grandparent<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>grandparent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>grandparent<span class="token punctuation">.</span>left <span class="token operator">==</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            grandparent<span class="token punctuation">.</span>left <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            grandparent<span class="token punctuation">.</span>right <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">bigRotation</span><span class="token punctuation">(</span><span class="token parameter">Vertex v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">==</span> v <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>left <span class="token operator">==</span> v<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Zig-zig</span>        <span class="token function">smallRotation</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">smallRotation</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">==</span> v <span class="token operator">&amp;&amp;</span> v<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>right <span class="token operator">==</span> v<span class="token punctuation">.</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Zig-zig</span>        <span class="token function">smallRotation</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">smallRotation</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// Zig-zag</span>        <span class="token function">smallRotation</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">smallRotation</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">Vertex v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span>sum <span class="token operator">=</span> v<span class="token punctuation">.</span>key <span class="token operator">+</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> v<span class="token punctuation">.</span>left<span class="token punctuation">.</span>sum <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> v<span class="token punctuation">.</span>right<span class="token punctuation">.</span>sum <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        v<span class="token punctuation">.</span>right<span class="token punctuation">.</span>parent <span class="token operator">=</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We could also have <code>Join</code> as <code>merge</code> define below. Here we always choose the right root as the new root of the merged tree.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">Vertex <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">Vertex left<span class="token punctuation">,</span> Vertex right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>right<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        right <span class="token operator">=</span> right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    right <span class="token operator">=</span> <span class="token function">splay</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    right<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Similarly, we can have <code>Split</code> as <code>split</code>. The <code>find</code> will be given later. At this stage we only need to know the <code>find</code> will give us two vertices given the <code>root</code> of the tree and the queried <code>key</code>: the result node and the new root (remember we always move the recently accessed node to the root). The <code>split</code> here would divide the tree into two trees and return two vertices representing two new roots of two divided trees.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">VertexPair <span class="token function">split</span><span class="token punctuation">(</span><span class="token parameter">Vertex root<span class="token punctuation">,</span> int key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    VertexPair result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VertexPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    VertexPair findAndRoot <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> findAndRoot<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    result<span class="token punctuation">.</span>right <span class="token operator">=</span> findAndRoot<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span>left <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">splay</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    result<span class="token punctuation">.</span>left <span class="token operator">=</span> result<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    result<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result<span class="token punctuation">.</span>left<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">update</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">VertexPair</span> <span class="token punctuation">{</span>    Vertex left<span class="token punctuation">;</span>    Vertex right<span class="token punctuation">;</span>    <span class="token function">VertexPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token function">VertexPair</span><span class="token punctuation">(</span><span class="token parameter">Vertex left<span class="token punctuation">,</span> Vertex right</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We then have <code>Insert</code> implemented as <code>insert</code>. We utilize <code>split</code> to disconnect the tree at the edge where the node <code>x</code> should be added, and <code>merge</code> the <code>x</code> with left subtree and right subtree.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">int x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// System.out.println("Inserting "+x);</span>    Vertex left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    Vertex right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    Vertex new_vertex <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    VertexPair leftRight <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    left <span class="token operator">=</span> leftRight<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    right <span class="token operator">=</span> leftRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> right<span class="token punctuation">.</span>key <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        new_vertex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vertex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    root <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> new_vertex<span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>We can also have <code>Delete</code> as <code>erase</code>: we use <code>split</code> to break the connection(s) between the targeting node <code>x</code> and the splay tree. Then we merge the rest back together.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">void</span> <span class="token function">erase</span><span class="token punctuation">(</span><span class="token parameter">int x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// use split and merge</span>    VertexPair leftMiddle <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    Vertex left <span class="token operator">=</span> leftMiddle<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    Vertex middle <span class="token operator">=</span> leftMiddle<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    VertexPair middleRight <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    middle <span class="token operator">=</span> middleRight<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    Vertex right <span class="token operator">=</span> middleRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>middle <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> middle<span class="token punctuation">.</span>key <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        middle <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        root <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Lastly we have out <code>find</code> described previously.</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token comment">// Searches for the given key in the tree with the given root</span><span class="token comment">// and calls splay for the deepest visited node after that.</span><span class="token comment">// Returns pair of the result and the new root.</span><span class="token comment">// If found, result is a pointer to the node with the given key.</span><span class="token comment">// Otherwise, result is a pointer to the node with the smallest</span><span class="token comment">// bigger key (next value in the order).</span><span class="token comment">// If the key is bigger than all keys in the tree,</span><span class="token comment">// then result is null.</span>VertexPair <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">Vertex root<span class="token punctuation">,</span> int key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Vertex v <span class="token operator">=</span> root<span class="token punctuation">;</span>    Vertex last <span class="token operator">=</span> root<span class="token punctuation">;</span>    Vertex next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>v <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>key <span class="token operator">&gt;=</span> key <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> v<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> next<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            next <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        last <span class="token operator">=</span> v<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            v <span class="token operator">=</span> v<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            v <span class="token operator">=</span> v<span class="token punctuation">.</span>left<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    root <span class="token operator">=</span> <span class="token function">splay</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VertexPair</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>boolean <span class="token function">find</span><span class="token punctuation">(</span><span class="token parameter">int x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// By looking into find(Vertex, int) if found,</span>    <span class="token comment">// the right of the returned VertexPair is the node</span>    <span class="token comment">// the left is the smallest bigger node</span>    <span class="token comment">/* Does this work? */</span>    <span class="token comment">//     VertexPair leftRight = find(root, x);</span>    <span class="token comment">//     if(leftRight.right != null &amp;&amp; leftRight.right.key == x) {</span>    <span class="token comment">//         return true;</span>    <span class="token comment">//     }</span>    <span class="token comment">//     return false;</span>    Vertex left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    Vertex right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    VertexPair leftRight <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>    left <span class="token operator">=</span> leftRight<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    right <span class="token operator">=</span> leftRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> right<span class="token punctuation">.</span>key <span class="token operator">!=</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Finally, we can use the splay tree and calculate the range sum via <code>sum</code>: As described above, we split the tree into three parts among which the middle part ranges from <code>from</code> to <code>to</code>, then we can get the range sum easily. After the query, we just need to merge those three parts back to restore the splay tree.</p><h3 id="Range-sum"><a href="#Range-sum" class="headerlink" title="Range sum"></a>Range sum</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js">long <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">int <span class="token keyword">from</span><span class="token punctuation">,</span> int to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//        System.out.println("From "+from + " to " + to);</span>    VertexPair leftMiddle <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vertex left <span class="token operator">=</span> leftMiddle<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    Vertex middle <span class="token operator">=</span> leftMiddle<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    VertexPair middleRight <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> to <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    middle <span class="token operator">=</span> middleRight<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    Vertex right <span class="token operator">=</span> middleRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    long ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// Complete the implementation of sum</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>middle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>        ans <span class="token operator">=</span> middle<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    middle <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    root <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h3><p>The full implementation can be found <a href="https://github.com/ChujieChen/Data_Structures/blob/master/src/week4/SetRangeSum.java">here</a>. Feel free to test it with some examples below.</p><p><em>Sample 1</em><br>Input:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike"><span class="token number">15</span><span class="token operator">?</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token number">1</span><span class="token operator">?</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token number">2</span>s <span class="token number">1</span> <span class="token number">2</span><span class="token operator">+</span> <span class="token number">1000000000</span><span class="token operator">?</span> <span class="token number">1000000000</span><span class="token operator">-</span> <span class="token number">1000000000</span><span class="token operator">?</span> <span class="token number">1000000000</span>s <span class="token number">999999999</span> <span class="token number">1000000000</span> <span class="token operator">-</span><span class="token number">2</span><span class="token operator">?</span> <span class="token number">2</span><span class="token operator">-</span> <span class="token number">0</span><span class="token operator">+</span> <span class="token number">9</span>s <span class="token number">0</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Output:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">Not foundFound<span class="token number">3</span>FoundNot found<span class="token number">1</span>Not found<span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Explanation:<br>For the first 5 queries, 𝑥 = 0. For the next 5 queries, 𝑥 = 3. For the next 5 queries, 𝑥 = 1. The actual list of operations is:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike"><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> → <span class="token number">3</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> → Found<span class="token function">del</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> → Not found<span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> → <span class="token number">1</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> → Not found<span class="token function">del</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> → <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Sample 2</em><br>Input:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike"><span class="token number">5</span><span class="token operator">?</span> <span class="token number">0</span><span class="token operator">+</span> <span class="token number">0</span><span class="token operator">?</span> <span class="token number">0</span><span class="token operator">-</span> <span class="token number">0</span><span class="token operator">?</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Output:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">Not foundFoundNot found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><em>Sample 3</em><br>Input:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike"><span class="token number">5</span><span class="token operator">+</span> <span class="token number">491572259</span><span class="token operator">?</span> <span class="token number">491572259</span><span class="token operator">?</span> <span class="token number">899375874</span>s <span class="token number">310971296</span> <span class="token number">877523306</span><span class="token operator">+</span> <span class="token number">352411209</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Output:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">FoundNot found<span class="token number">491572259</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Glance at State Hooks in React</title>
      <link href="/2020/09/01/a-glance-at-state-hooks-in-react/"/>
      <url>/2020/09/01/a-glance-at-state-hooks-in-react/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Glance-at-State-Hooks-in-React"><a href="#A-Glance-at-State-Hooks-in-React" class="headerlink" title="A Glance at State Hooks in React"></a>A Glance at State Hooks in React</h1><h2 id="Hooks-vs-Class-Components"><a href="#Hooks-vs-Class-Components" class="headerlink" title="Hooks vs. Class Components"></a>Hooks vs. Class Components</h2><p>Hooks make your react code look simpler. Take a counter program as an example.<br>Using class components:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      count<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>increase <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">increase</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>increase<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ClassComponent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But with hooks, one can import <code>useState</code> first and instead of creating a class.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FunctionalComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">increase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>increase<span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> FunctionalComponent<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Hooks provide a more direct API to the React concepts like props, state, context, refs, and lifecycle. There are a variety of hooks available: 1. that can store data (e.g. <code>useState</code>,<code>useReducer</code>) and connect data with lifecycle; 2. that can provide some memory functionality (e.g. <code>useMemo</code>,<code>useCallback</code>) so we can store some values in the previous execution; 3. that can provide more control (e.g. <code>useEffect</code>,<code>useRef</code>, <code>useContext</code>) so we have a extensive access and control inside React.</p><h2 id="Example-Clock-with-State-Hooks"><a href="#Example-Clock-with-State-Hooks" class="headerlink" title="Example: Clock with State Hooks"></a>Example: Clock with State Hooks</h2><p>Here is an example using state hooks to update a clock every one second. with <code>setInterval(updateTime, 1000);</code>. The <code>const [time, setTime]</code> line follows the JavaScript syntax called array destructuring. One can think the <code>time</code> as <code>this.state.time</code> and <code>setTime</code> as <code>this.setState</code> in a class.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setInterval</span><span class="token punctuation">(</span>updateTime<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>time<span class="token punctuation">,</span> setTime<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token string">"en-GB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">updateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token string">"en-GB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTime</span><span class="token punctuation">(</span>newTime<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span><span class="token punctuation">{</span>time<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>updateTime<span class="token punctuation">}</span><span class="token operator">&gt;</span>Get Time<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Example-To-Do-List-using-State-Hooks-and-Props"><a href="#Example-To-Do-List-using-State-Hooks-and-Props" class="headerlink" title="Example: To-Do List using State Hooks and Props"></a>Example: To-Do List using State Hooks and Props</h2><p>Below is a to-do list (source code: <a href="https://codesandbox.io/s/to-do-list-using-state-hooks-and-props-4d0me?file=/src/components/App.jsx">codesandbox</a>). The <code>App</code> component (shown below) contains two components - <code>InputArea</code> and <code>ToDoItem</code>. <code>items</code> is the array used to store items showing on the screen, <code>setItems</code> is the function we use to update the <code>items</code>. Since we just want to add / delete an item from <code>items</code> but not to create a new array every time, we can work on the previous state with React hook and use spread operator in JS ES6 to extend the array or use <code>filter</code> method to delete the item that is clicked.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ToDoItem <span class="token keyword">from</span> <span class="token string">"./ToDoItem"</span><span class="token punctuation">;</span><span class="token keyword">import</span> InputArea <span class="token keyword">from</span> <span class="token string">"./InputArea"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>items<span class="token punctuation">,</span> setItems<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token parameter">inputText</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setItems</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevItems</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span>prevItems<span class="token punctuation">,</span> inputText<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">function</span> <span class="token function">deleteItem</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setItems</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prevItems</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> prevItems<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index <span class="token operator">!==</span> id<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"container"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"heading"</span><span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>To<span class="token operator">-</span>Do List<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>InputArea onAdd<span class="token operator">=</span><span class="token punctuation">{</span>addItem<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>          <span class="token punctuation">{</span>items<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">todoItem<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>            <span class="token operator">&lt;</span>ToDoItem              key<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>              id<span class="token operator">=</span><span class="token punctuation">{</span>index<span class="token punctuation">}</span>              text<span class="token operator">=</span><span class="token punctuation">{</span>todoItem<span class="token punctuation">}</span>              onChecked<span class="token operator">=</span><span class="token punctuation">{</span>deleteItem<span class="token punctuation">}</span>            <span class="token operator">/</span><span class="token operator">&gt;</span>          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>InputArea</code> (shown below) contains <code>inputText</code> which stores the text typed in the input. It is updated by the <code>onChange</code>‘s <code>handleChange</code> in the <code>input</code> element. What interesting is the <code>onClick</code> inside the <code>button</code> element. It allows us to add what we just typed into the array defined in <code>App.jsx</code>. If we take a closer look, the <code>onAdd</code> which carries <code>addItem</code> is passed from <code>App.jsx</code> (Yes! We can pass functions as props). Since we don’t want the <code>addItem</code> executed immediately when the page gets rendered, we write line 14-16 using the arrow operator.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">InputArea</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>inputText<span class="token punctuation">,</span> setInputText<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">function</span> <span class="token function">handleChange</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newValue <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token function">setInputText</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"form"</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>input onChange<span class="token operator">=</span><span class="token punctuation">{</span>handleChange<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token punctuation">{</span>inputText<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>button        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>          props<span class="token punctuation">.</span><span class="token function">onAdd</span><span class="token punctuation">(</span>inputText<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">setInputText</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>Add<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> InputArea<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> Similarly, in <code>ToDoItem.jsx</code> (shown below) the <code>props.onChecked</code> was passed from <code>App.jsx</code> and it’s the function <code>deleteItem</code>. Since <code>props.onChecked</code> is called from <code>ToDoItem.jsx</code>, we also need to pass the <code>id</code> from <code>App.jsx</code> to <code>ToDoItem.jsx</code> using props so we can delete that item properly.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">ToDoItem</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div      onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        props<span class="token punctuation">.</span><span class="token function">onChecked</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&gt;</span>      <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> ToDoItem<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Front End </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React.js </tag>
            
            <tag> Web Development </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Upstreams &amp; Submodules</title>
      <link href="/2020/08/22/git-upstream-submodule/"/>
      <url>/2020/08/22/git-upstream-submodule/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-Upstreams-amp-Submodules"><a href="#Git-Upstreams-amp-Submodules" class="headerlink" title="Git Upstreams &amp; Submodules"></a>Git Upstreams &amp; Submodules</h1><h2 id="Upstreams"><a href="#Upstreams" class="headerlink" title="Upstreams"></a>Upstreams</h2><p>Sometimes you may encounter such a situation. You want to fork some projects and stay updated to those projects, but in the meantime you want to do some personal modifications. However, you don’t want to send those personal changes back to those upstreams (e.g those changes contain your personal information) and you want to make your forked repositories <strong>private</strong> (but you can’t with forking). Now all you need is git upstreams.</p><p>To make things simply, let’s say there is one repository on github called <code>A</code>, the first thing you wanna do is create a new empty repository <code>B</code> in your github, record the <code>&lt;urlB&gt;</code> of your repo. Then clone repo <code>A</code> to your local machine as usual:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">$ git clone <span class="token operator">&lt;</span>urlA<span class="token operator">&gt;</span> repoName$ cd repoName<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Make the origin of this <code>repoName</code>  upstream:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">$ git remote rename origin upstream<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Use your <code>&lt;urlB&gt;</code> and add your <code>repoName</code> to this url:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">$ git remote add origin <span class="token operator">&lt;</span>urlB<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Then you can push changes back to your repo <code>B</code>:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">$ git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Till now, you successfully make <code>A</code> as upstream and <code>B</code> as the origin. Next time you want to update your <code>B</code> to <code>A</code>, all you need to do is:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">$ git pull upstream master <span class="token operator">&amp;&amp;</span> git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Deal with those conflicts (if any) and then your private repo <code>B</code> is up to date with <code>A</code> but also have your own modifications as well.</p><h2 id="Submodules"><a href="#Submodules" class="headerlink" title="Submodules"></a>Submodules</h2><p>Now let’s say you actually have a larger project <code>C</code> of which the <code>B</code> above is a part. In other words, you have two remote repos <code>C</code> and <code>B</code> and you want <code>B</code> updated with <code>A</code> as mentioned above. So <code>B</code> is in fact a submodule under <code>C</code>. This will cause some new issues, in fact. If you do nothing and try <code>git commit</code> the changes of <code>B</code> under <code>C</code> you will encounter warnings (<code>Changes not staged for commit</code>) and the changes are actually not commited. To solve this, you need to make <code>B</code> as submodule of <code>C</code> and pull/push two repos independently.</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">$ cd <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>local<span class="token operator">/</span>B$ git submodule add <span class="token operator">&lt;</span>urlB<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>A common practice is when you finish your changes to <code>B</code> and <code>C</code>, go to the path of <code>B</code> and push those changes to repoB first:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">$ cd <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>local<span class="token operator">/</span>B$ git add <span class="token punctuation">.</span>$ git commit <span class="token operator">-</span>m <span class="token string">"commitMsg"</span>$ git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Then go back to the root of <code>C</code> and push changes:</p><pre class="line-numbers language-clike" data-language="clike"><code class="language-clike">$ cd <span class="token operator">/</span>path<span class="token operator">/</span>to<span class="token operator">/</span>local<span class="token operator">/</span>C$ git add <span class="token punctuation">.</span>$ git commit <span class="token operator">-</span>m <span class="token string">"commitMsg"</span>$ git push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>If you have multiple submodules and you want to push changes of everything at one time (normally I don’t do it this way), you may want to take a look <a href="https://www.vogella.com/tutorials/GitSubmodules/article.html">here</a>.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Does A* always return an optimal path?</title>
      <link href="/2020/08/15/admissibility-of-a/"/>
      <url>/2020/08/15/admissibility-of-a/</url>
      
        <content type="html"><![CDATA[<p>A* is a static path search algorithm which is used to find the shortest path from the source (S) to the goal (G) from a finite weighted graph. The math representation of A* is<br>$$f(n) = c(n) + h(n) $$</p><p>Some people may prefer using $g$ instead of $c$ to indicate the cost function. And the $h$ is a heuristic function. More information can be found from the original <a href="https://ai.stanford.edu/~nilsson/OnlinePubs-Nils/PublishedPapers/astar.pdf">paper</a>.</p><p>So let’s get back to the title, how about the admissibility of A*? Well, as we can guess, it actually relies on the heuristic function. Again, A* algorithm requires the $h$ should be a ‘good’ estimation or ‘admissible’. It means that it has to be no longer than the actual distance. But if $h$ has no meaning, e.g. 0, then it is BFS. An example in real life is letting $h$ be the Euclidean distance from the node to the goal in navigation. But what does it do with the optimality? Here’s a simplified math proof – proof by contradiction:</p><p>Say all previous states till $n$ have optimal cost values already. For the next state till $n’$ we would have $f(n’)=c(n’)+h(n’)$ which is minimum among states in OPEN list. But let’s assume $g(n’)$ itself is actually suboptimal,  that means there has to be at least one state $n’^*$ on an optimal path from S that is in OPEN,<br>$$c(n’^*) + h(n’^*) \geq  c(n’) + h(n’)  \qquad  (1)(\text{min})$$<br>meaning on the same time we have<br>$$c(n’^*) + \delta(n’^*, n’) &lt;  c(n’) \qquad  (2)(\text{assumption})$$<br>Rewrite (2) can give us<br>$$c(n’^*) + \delta(n’^*, n’) + h(n’) &lt;  c(n’) + h(n’) \qquad  (3) $$<br>As $h$ is admissible, we have<br>$$h(n’^*) +   \delta(n’^*, n’) &lt; h(n’) \qquad (4) (<br>\text{underestimate}) $$<br>So (3) would be<br>$$ c(n’^*) + h(n’^*) &lt; c(n’) + h(n’)$$<br>which is contradictory with (1), so $c(n)$ must be optimal.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Math </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
